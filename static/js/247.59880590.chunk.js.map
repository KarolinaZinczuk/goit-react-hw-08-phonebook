{"version":3,"file":"static/js/247.59880590.chunk.js","mappings":"sNAAaA,EAAiB,SAACC,GAAD,OAAWA,EAAMC,QAAjB,EAIjBC,EAAyB,SAACF,GACnC,OAAOA,EAAMC,SAASE,MAAMC,QAAO,SAAAC,GAAO,OACtCA,EAAQC,KAAKC,cAAcC,SAASR,EAAMS,QAAQA,QAAQF,cADpB,GAG7C,EAEYG,EAAgB,SAAAV,GAC3B,OAAOA,EAAMC,SAASU,SACvB,E,UCXD,EAAyB,4BAAzB,EAA4D,0BAA5D,EAA6F,0B,SCOhFC,EAAc,WACvB,IAAMX,GAAWY,EAAAA,EAAAA,IAAYd,GACvBe,GAAWC,EAAAA,EAAAA,MAEXC,GAAmBH,EAAAA,EAAAA,IAAYX,GAErC,OACI,+BACI,eAAIe,UAAWC,EAAf,SACKjB,EAASE,MAAMgB,OAASH,EAAiBI,KAAI,SAACf,GAAD,OAC1C,gBAAIY,UAAWC,EAAf,UACKb,EAAQC,KADb,IACoBD,EAAQgB,QACxB,mBACIJ,UAAWC,EACXI,QAAS,kBAAMR,GAASS,EAAAA,EAAAA,IAAclB,EAAQmB,IAArC,EAFb,sBAF6BnB,EAAQmB,GADC,IAUxC,iBAIrB,EC9BD,EAAuB,4BAAvB,EAA2D,6BAA3D,EAAiG,8BAAjG,EAAyI,+BCM5HC,EAAgB,WACzB,IAAMxB,GAAWY,EAAAA,EAAAA,IAAYd,GACvB2B,GAAUC,EAAAA,EAAAA,QAAO,MACjBC,GAAYD,EAAAA,EAAAA,QAAO,MACnBb,GAAWC,EAAAA,EAAAA,MAuBjB,OACI,gBAAKc,SAAUX,EAAf,UACI,kBAAMD,UAAWC,EAAaY,SAvBb,SAACC,GACtBA,EAAEC,iBACF,IAAMC,EAAcP,EAAQQ,QAAQC,MAC9BC,EAAgBR,EAAUM,QAAQC,MAEpClC,EAASE,MAAMkC,MAAK,SAAAhC,GAAO,OAAIA,EAAQC,OAAS2B,GAAe5B,EAAQgB,SAAWe,CAAvD,IAE3BE,MAAM,GAAD,OAAIL,EAAJ,6BAITnB,GACIyB,EAAAA,EAAAA,IAAW,CACPjC,KAAM2B,EACNZ,OAAQe,KAGhBV,EAAQQ,QAAQC,MAAQ,GACxBP,EAAUM,QAAQC,MAAQ,GAC7B,EAIO,WACI,8BACI,kCACA,kBACIlB,UAAWC,EACXsB,KAAK,OACLlC,KAAK,OACLmC,UAAQ,EACRC,IAAKhB,EACLiB,QAAQ,yHACRC,MAAM,+IAGd,8BACI,oCACA,kBACI3B,UAAWC,EACXsB,KAAK,OACLlC,KAAK,SACLmC,UAAQ,EACRE,QAAQ,yFACRC,MAAM,+FACNF,IAAKd,QAGb,mBAAQY,KAAK,SAASvB,UAAWC,EAAjC,6BAMf,EC3Dc,SAAS2B,IACtB,IAAM/B,GAAWC,EAAAA,EAAAA,MACXJ,GAAYE,EAAAA,EAAAA,IAAYH,GAM9B,OAJAoC,EAAAA,EAAAA,YAAU,WACRhC,GAASiC,EAAAA,EAAAA,MACV,GAAE,CAACjC,KAGF,iCACE,SAACkC,EAAA,EAAD,WACE,gDAEF,SAACvB,EAAD,KACA,yBAAMd,GAAa,4BACnB,SAACC,EAAD,MAGL,C","sources":["redux/contact/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactEditor/ContactEditor.module.css?ead8","components/ContactEditor/ContactEditor.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = (state) => state.contacts;\n\nexport const selectFilters = (state) => state.filters.filters;\n\nexport const selectFilteredContacts = (state) => {\n    return state.contacts.items.filter(contact =>\n        contact.name.toLowerCase().includes(state.filters.filters.toLowerCase())\n    );\n};\n\nexport const selectLoading = state => {\n  return state.contacts.isLoading;\n};","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ContactList_button__7kL4l\",\"list\":\"ContactList_list__csErn\",\"text\":\"ContactList_text__+NWAW\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectFilteredContacts } from 'redux/contact/selectors.js';\nimport { deleteContact } from 'redux/contact/operations';\n\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactList.module.css\";\n\nexport const ContactList = () => {\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    const filteredContacts = useSelector(selectFilteredContacts);\n\n    return (\n        <>\n            <ul className={styles.list}>\n                {contacts.items.length ? filteredContacts.map((contact) => (\n                    <li className={styles.text} key={contact.id}>\n                        {contact.name} {contact.number}\n                        <button\n                            className={styles.button}\n                            onClick={() => dispatch(deleteContact(contact.id))}>\n                            Delete\n                        </button>\n                    </li>\n                ))\n                    : 'No contacts'}\n            </ul>\n        </>\n    );\n};\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        })\n    ),\n    deleteContact: PropTypes.func,\n};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactEditor_form__U4ufl\",\"input\":\"ContactEditor_input__Nbns0\",\"button\":\"ContactEditor_button__yGZhk\",\"wrapper\":\"ContactEditor_wrapper__1cePY\"};","import React, {useRef} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contact/operations'\nimport { selectContacts } from 'redux/contact/selectors';\n\nimport styles from \"./ContactEditor.module.css\";\n\nexport const ContactEditor = () => {\n    const contacts = useSelector(selectContacts);\n    const nameRef = useRef(null);\n    const numberRef = useRef(null);    \n    const dispatch = useDispatch();\n\n    const handleAddContact = (e) => {\n        e.preventDefault();\n        const contactName = nameRef.current.value;\n        const contactNumber = numberRef.current.value;\n        if (\n            contacts.items.find(contact => contact.name === contactName && contact.number === contactNumber)\n        ) {\n            alert(`${contactName} is already in contacts`);\n            return;\n        }\n   \n        dispatch(\n            addContact({\n                name: contactName,\n                number: contactNumber,\n            })\n        );\n        nameRef.current.value = \"\";\n        numberRef.current.value = \"\";\n    };\n\n    return (\n        <div lassName={styles.wrapper}>\n            <form className={styles.form} onSubmit={handleAddContact}>\n                <label>\n                    <h2>Name</h2>\n                    <input\n                        className={styles.input}\n                        type=\"text\"\n                        name=\"name\"\n                        required\n                        ref={nameRef}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    />\n                </label>\n                <label>\n                    <h2>Number</h2>\n                    <input\n                        className={styles.input}\n                        type=\"text\"\n                        name=\"number\"\n                        required\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        ref={numberRef}\n                    />\n                </label>\n                <button type=\"submit\" className={styles.button}>\n                    Add contact\n                </button>\n            </form>\n        </div>\n    );\n};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contact/operations';\nimport { selectLoading } from 'redux/contact/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}"],"names":["selectContacts","state","contacts","selectFilteredContacts","items","filter","contact","name","toLowerCase","includes","filters","selectLoading","isLoading","ContactList","useSelector","dispatch","useDispatch","filteredContacts","className","styles","length","map","number","onClick","deleteContact","id","ContactEditor","nameRef","useRef","numberRef","lassName","onSubmit","e","preventDefault","contactName","current","value","contactNumber","find","alert","addContact","type","required","ref","pattern","title","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}